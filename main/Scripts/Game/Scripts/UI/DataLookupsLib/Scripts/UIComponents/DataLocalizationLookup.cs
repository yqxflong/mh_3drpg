// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System.Collections;

public class DataLocalizationLookup
{
    
    private static DataLocalizationLookup mInstance;
    
    public static DataLocalizationLookup instance {
        get {
            if (mInstance == null) {
                mInstance = new DataLocalizationLookup();
            }
            return mInstance;
        }
    }
    
    private DataLocalizationLookup ()
    {
    }
    
    public string LocalizeFromDataLookup(string dataID) {
        
        object localizationInfo;
        
        DataLookupsCache.Instance.SearchDataByID(dataID, out localizationInfo);
        
        if (null != localizationInfo) {
            if (localizationInfo is IDictionary) {
                IDictionary localizationContent = (IDictionary)localizationInfo;
                
                string formatString = localizationContent ["id"].ToString ();
                
                if(!string.IsNullOrEmpty(formatString))
                {
                    ArrayList fotmatParams = (ArrayList)localizationContent ["params"];
                    
                    object[] translatedFotmatParams = new object[fotmatParams.Count];
                    
                    for (int i = 0; i < fotmatParams.Count; i++) {
                        if (fotmatParams[i] != null ) {
                            string aa = fotmatParams[i].ToString();
                            translatedFotmatParams[i] = LocalizeString(aa);
                        }
                    }
                    
                    if (formatString.StartsWith (EB.Symbols.LocIdPrefix)) {
                        string value;
                        bool isExist = EB.Localizer.GetString (formatString, out value);
                        if (isExist) {
                            return EB.Localizer.Format(formatString, translatedFotmatParams);
                        } else {
                            return dataID;
                        }
                    } else {
                        return dataID;
                    }
                }
                else
                {
                    return dataID;
                }
                
            }
            else
            {
                return localizationInfo.ToString();
            }
        }
        return null;
    }
    
    public string LocalizeString(string id)
    {
        if (id == null) return id;
        if (id.StartsWith (EB.Symbols.LocIdPrefix)) 
        {
            string value;
            bool isExist = EB.Localizer.GetString (id, out value);
            if (isExist) 
            {
                return value;
            } 
            else
            {
                return id;
            }
        } 
        else
        {
            return id;
        }
    }
    
    public string LocalizeFormat(string id, params object[] args) 
    {
        object[] paramsArray;
        if (args.Length == 1 && args[0].GetType().Name == "ArrayList")
        {
            paramsArray = ((System.Collections.ArrayList)args[0]).ToArray();
        }
        else
        {
            paramsArray = args;
        }

        if (id.StartsWith (EB.Symbols.LocIdPrefix))
        {
            string value;
            bool isExist = EB.Localizer.GetString (id, out value);
            if (isExist) 
            {
                object[] translatedFotmatParams = null;
                if(paramsArray != null && paramsArray.Length > 0)
                {
                    translatedFotmatParams = new object[paramsArray.Length];

                    for (int i = 0; i < paramsArray.Length; i++) 
                    {
                        if (paramsArray [i] != null) 
                        {
                            translatedFotmatParams [i] = LocalizeString (paramsArray [i].ToString ());
                        }
                    }
                }
                return EB.Localizer.Format (id, translatedFotmatParams);
            }
            else
            {
                return id;
            }
        }
        else
        {
            return id;
        }
    }

    public enum eLOCALTYPE
    {
        Normal,
        DataLookup,
    }

    public static string Localize(string DataId, eLOCALTYPE type)
    {
        switch (type)
        {
            case eLOCALTYPE.Normal:
            default:
                return DataLocalizationLookup.instance.LocalizeString(DataId);
            case eLOCALTYPE.DataLookup:
                return DataLocalizationLookup.instance.LocalizeFromDataLookup(DataId);
        }
    }

}


